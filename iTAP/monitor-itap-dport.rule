# =============================================================================
# This file defines the rule to monitor itap device.
#
# Huan Song <songh@grg.net.cn>
# Nanjing Yunlilai (C) 2018-2019
# =============================================================================
import "security/monitor/iTAP/cfg/monitor-itap-cfg.rule";
import "security/monitor/iTAP/cfg/%(__sys_lang__)/monitor-itap.rule";


# -----------------------------------------------------------------------------
# Setup the timestamp so that query() function could use the save timestamp.
# -----------------------------------------------------------------------------
__now__ = now()-__offset__;


# -----------------------------------------------------------------------------
# __alert() - Output the alarm result.
#
# This function returns the list itself for chain operation.
# -----------------------------------------------------------------------------
def __alert(list, args) {
	__subtype__      = args["subtype"];
	__level__        = args["level"];

	__desc_type__    = args["desc_type"];
	__desc_subtype__ = args["desc_subtype"];
	__desc_action__  = args["desc_action"];
	__desc_title__   = args["desc_title"];

	return alert(list);
}


# -----------------------------------------------------------------------------
# query_dport() - check dport white list.
# 检测是否存在端口白名单之外的端口
#
# @args: Configuration of per dport.
# return: a dport list
# -----------------------------------------------------------------------------
def query_dport(lis,args) {
	#threshold = args["threshold"];
	imap_host = __ihost__;
	#pprint(imap_host);
	dportdic = __wl_port__;
	indx = __tcp_index__;
	if(dportdic[0]=="#"){ #端口白名单为空
		return ["#"];
	}
	#pprint(dportdic);
	dportlist=item_values(dportdic,"port");
	#pprint(dportlist);
	#pprint(__long_range__);
	#获取 白名单之外的端口信息
	sql = "
		SELECT   SUM(flow) AS flows
		FROM     $(indx)
		WHERE        last(%(__range__))
				 AND sip IN $(imap_host)
				 AND NOT (dport IN $(dportlist))
		GROUP BY sip,dport
		LIMIT 5,50
	";

	res = query(sql); 
	#pprint("first:");
	#pprint(dport_list);

	# alert
	dres=[];
	nows=time("T");
	for itm in res{
		tmp={};
		tmp["dport"]=itm["dport"];
		tmp["@timestamp"]=nows;
		tmp["sip"]=itm["sip"];
		dres=append(dres,tmp);
	}
	__alert(dres,args);
	dport_list=item_values(res,"dport");
	return dport_list; 
}


# -----------------------------------------------------------------------------
# query_dport_dip_warn(lis,args) - lis是可疑端口的list
# 检测sip是否使用可疑dport进行成功通讯，并记录dip
#
# @args: Configuration of per dport.
# return: a dip-dport list
# -----------------------------------------------------------------------------
def query_dport_dip_warn(lis,args) {
	if(len(lis)==0){
		return ["#"];
	}
	imap_host = __ihost__;
	indx = __tcp_index__;
	#pprint(imap_host);
	#pprint(lis);
	# 查找与dport通讯成功的dip
	sql = "
		SELECT   SUM(flow) AS flows
		FROM     $(indx)
		WHERE        last(%(__range__))
				AND sip IN $(imap_host)
				AND dport IN $(lis)
				AND timeout_state_num IN $(__valid_status__)
		GROUP BY sip,dip,dport
		LIMIT    5,50,50
	";
	res = query(sql);
	#pprint(res);
	dp_dip=agg_values(res,"dport","dip");
	#pprint(dp_dip);
	# alert
	dres=[];
	nows=time("T");
	for dd in res{
		tmp={};
		tmp["dport"]=dd["dport"];
		tmp["dip"]=dd["dip"];
		tmp["@timestamp"]=nows;
		tmp["sip"]=dd["sip"];
		dres=append(dres,tmp);
	}
	
	__alert(dres,args);
	return imap_host;
}



# -----------------------------------------------------------------------------
# main() - Main entry of the rule.
# -----------------------------------------------------------------------------
def main() {
	func_list = [
		# check dport whitelist 
		{ "name": "query_dport",           "args": __cfg_dport__ },
		{ "name": "query_dport_dip_warn",       "args": __cfg_sip_dip__ }
	];

	call_list(func_list);
}


# -----------------------------------------------------------------------------
# Run the rule.
# -----------------------------------------------------------------------------
main();

