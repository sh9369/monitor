# =============================================================================
# This file defines the rule to monitor imap device.
#
# Huan Song <songh@grg.net.cn>
# Nanjing Yunlilai (C) 2018-2019
# =============================================================================
import "monitor/iTAP/cfg/monitor-itap-cfg.rule";
import "monitor/iTAP/cfg/%(__sys_lang__)/monitor-itap.rule";


# -----------------------------------------------------------------------------
# Setup the timestamp so that query() function could use the save timestamp.
# -----------------------------------------------------------------------------
__now__ = now()-__offset__;


# -----------------------------------------------------------------------------
# __alert() - Output the alarm result.
#
# This function returns the list itself for chain operation.
# -----------------------------------------------------------------------------
def __alert(list, args) {
	__subtype__      = args["subtype"];
	__level__        = args["level"];

	__desc_type__    = args["desc_type"];
	__desc_subtype__ = args["desc_subtype"];
	__desc_action__  = args["desc_action"];
	__desc_title__   = args["desc_title"];

	return alert(list);
}


# -----------------------------------------------------------------------------
# query_domain_last() - Query per domain of white list.
# 转换domain whitelist，得到dip list；
# 若wl_domain数量增多，请调大 LIMIT 数值
#
# @args: Configuration of per dport.
# return: a dip list(refer domain)
# -----------------------------------------------------------------------------
def query_domain_last(lis,args) {
	#threshold = args["threshold"];
	imap_host = __ihost__;
	domainlis = __wl_domain__;
	indx = __dns_index__;
	if(domainlis[0]=="#"){
		return ["#"];
	}
	#pprint(__long_range__);
	sql = "
		SELECT   SUM(flow) AS flows
		FROM     $(indx)
		WHERE        last(%(__long_range__))
				 AND isresponse = 0
				 AND sip IN $(imap_host)
				 AND domain IN $(domainlis)
		GROUP BY answer
		LIMIT 200
	";

	res = query(sql);
	# res 是 domain whitelist 转成dip whitelist
	anslis=item_values(res,"answer");
	diplist_all=get_ipv4(anslis);

	# 拼接wl_port的dip
	rangelist=[]; # 拼接range
	for itm in __wl_port__{
		for diptmp in itm["dip"]{
			if(diptmp=="#"){
				break;
			}
			diplist_all=append(diplist_all,diptmp);
		}
		for drange in itm["range"]{
			if(drange=="#"){
				break;
			}
			rangelist=append(rangelist,drange);
		}
	}
	all=[];
	all=append(all,diplist_all);
	all=append(all,rangelist);
	return all; 
}



# -----------------------------------------------------------------------------
# query_dport_dip() - Query per dport and check dip white list .
# 检查是否存在对白名单以外的 dip 访问
#
# @listRes: A list of previous result.
# @args:    Configuration of per dip.
# -----------------------------------------------------------------------------
def query_dport_dip(lis, args) {
	imap_host = __ihost__;
	#pprint imap_host;
	diplist = lis[0];
	diprange = lis[1];
	indx = __tcp_index__;

	# 检查不在白名单的dip
	sql = "
		SELECT   SUM(flow) AS flows
		FROM     $(indx)
		WHERE        last(%(__range__))
				 AND sip IN $(imap_host)
				 AND NOT(dip IN $(diplist) OR ip_ranges(dip,$(diprange)))
		GROUP BY sip,dip
		LIMIT    5,50
	";
	res = query(sql);
	# alert
	results=[];
	for dpl in res{
		tmp={};
		nows=time("T");
		tmp["@timestamp"]=nows;
		tmp["dip"]=dpl["dip"];
		tmp["sip"]=dpl["sip"];
		results=append(results,tmp);	
	}
	#pprint(out_dip);
	# alert
	__alert(results, args);
	tmpdiplis=item_values(res,"dip");
	return tmpdiplis;
}



# -----------------------------------------------------------------------------
# query_sip_dip() - Query per sip/dip and get timeout_state_num.if (sip,dip)
#					has 3_times_handshake then alert.
# 查看sip/dip是否存在三次握手
#
# @listRes: A list of previous dip(out of white list ).
# @args:    Configuration of per dip.
# -----------------------------------------------------------------------------
def query_sip_dip(listRes, args) {
	imap_host = __ihost__;
	indx = __tcp_index__;
	#pprint imap_host;
	if (len(listRes) == 0 or listRes[0]=="#"){
		return listRes;
	}
	sql = "
		SELECT   SUM(flow) AS flows
		FROM     $(indx)
		WHERE        last(%(__range__))
				 AND sip IN $(imap_host)
				 AND dip IN $(listRes)
				 AND timeout_state_num IN $(__valid_status__)
		GROUP BY sip,dip,dport
		LIMIT 5,50,10
	";
	res = query(sql);
	# alert
	if(len(res)==0){
		continue;
	}else{
		fres=[];
		now=time("T");
		for itms in res{
			tmps={};
			tmps["dip"]=itms["dip"];
			tmps["sip"]=itms["sip"];
			tmps["dport"]=itms["dport"];
			tmps["@timestamp"]=now;
			fres=append(fres,tmps);
		}
		__alert(fres, args);
		#pprint("second:");
		#pprint(res);
		#return fres;
	}
	#pprint("3rd:");
}


# -----------------------------------------------------------------------------
# main() - Main entry of the rule.
# -----------------------------------------------------------------------------
def main() {
	func_list = [
		# check dport with their whitelist
		{ "name": "query_domain_last",           "args": __cfg_dip__ },
		{ "name": "query_dport_dip",           "args": __cfg_dip__ },
		{ "name": "query_sip_dip", 			"args": __cfg_sip_dip__ }
	];

	call_list(func_list);
}


# -----------------------------------------------------------------------------
# Run the rule.
# -----------------------------------------------------------------------------
main();

