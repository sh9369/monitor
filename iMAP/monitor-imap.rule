# =============================================================================
# This file defines the rule to monitor imap device.
#
# Huan Song <songh@grg.net.cn>
# Nanjing Yunlilai (C) 2018-2019
# =============================================================================
import "monitor/iMAP/cfg/monitor-imap.rule";


# -----------------------------------------------------------------------------
# Setup the timestamp so that query() function could use the save timestamp.
# -----------------------------------------------------------------------------
__now__ = now();


# -----------------------------------------------------------------------------
# __alert() - Output the alarm result.
#
# This function returns the list itself for chain operation.
# -----------------------------------------------------------------------------
def __alert(list, args) {
	__subtype__      = args["subtype"];
	__level__        = args["level"];

	__desc_type__    = args["desc_type"];
	__desc_subtype__ = args["desc_subtype"];
	__desc_action__  = args["desc_action"];
	__desc_title__   = args["desc_title"];

	return alert(list);
}


# -----------------------------------------------------------------------------
# query_dport() - check dport white list.
# 检测是否存在端口白名单之外的端口
#
# @args: Configuration of per dport.
# return: a dport list
# -----------------------------------------------------------------------------
def query_dport(lis,args) {
	#threshold = args["threshold"];
	imap_host = __ihost__;
	#pprint(imap_host);
	dportdic = __wl_port__;
	indx = __tcp_index__;
	if(dportdic[0]=="#"){ #端口白名单为空
		return ["#"];
	}
	#pprint(dportdic);
	dportlist=item_values(dportdic,"port");
	#pprint(dportlist);
	#pprint(__long_range__);
	#获取 白名单之外的端口信息
	sql = "
		SELECT   dport
		FROM     $(indx)
		WHERE        last(%(__range__))
				 AND sip = $(imap_host)
				 AND not(dport IN $(dportlist))
	";

	res = query(sql);
	dport_list=item_values(res,"dport"); 
	#pprint("first:");
	#pprint(dport_list);

	# alert
	dres=[];
	nows=time("T");
	for itm in dport_list{
		tmp={};
		tmp["dport"]=itm;
		tmp["@timestamp"]=nows;
		tmp["sip"]=imap_host;
		dres=append(dres,tmp);
	}
	__alert(dres,args);
	return dport_list; 
}


# -----------------------------------------------------------------------------
# query_dport_dip_warn(lis,args) - lis是可疑端口的list
# 检测sip是否使用可疑dport进行成功通讯，并记录dip
#
# @args: Configuration of per dport.
# return: a dip-dport list
# -----------------------------------------------------------------------------
def query_dport_dip_warn(lis,args) {
	if(len(lis)==0){
		return ["#"];
	}
	imap_host = __ihost__;
	indx = __tcp_index__;
	#pprint(imap_host);
	#pprint(lis);
	# 查找与dport通讯成功的dip
	sql = "
		SELECT   SUM(flow) AS flows
		FROM     $(indx)
		WHERE        last(%(__range__))
				AND sip = $(imap_host)
				AND dport IN $(lis)
				AND timeout_state_num IN $(__valid_status__)
		GROUP BY dip,dport
		LIMIT    50,50
	";
	res = query(sql);
	#pprint(res);
	dp_dip=agg_values(res,"dport","dip");
	#pprint(dp_dip);
	# alert
	dres=[];
	nows=time("T");
	for dd in dp_dip{
		dp=dd["dport"];
		dip_lis=dd["dip"];
		# dport对应的dip个数大于3,则输出127.0.0.1告警；否则输出对应dip
		if(len(dip_lis)>3){
			tmp={};
			tmp["dport"]=dp;
			tmp["dip"]="127.0.0.1";
			tmp["@timestamp"]=nows;
			tmp["sip"]=imap_host;
			dres=append(dres,tmp);
		}
		else{
			for itm in dip_lis{
				tmp={};
				tmp["dport"]=dp;
				tmp["dip"]=itm;
				tmp["@timestamp"]=nows;
				tmp["sip"]=imap_host;
				dres=append(dres,tmp);
			}
		}
	}
	
	__alert(dres,args);
	return imap_host;
}

# -----------------------------------------------------------------------------
# query_domain_last() - Query per domain of white list.
# 转换domain whitelist，与port whitelist合并；
# 若wl_domain数量增多，请调大LIMIT 数值
#
# @args: Configuration of per dport.
# return: a dip list(refer domain)
# -----------------------------------------------------------------------------
def query_domain_last(lis,args) {
	#threshold = args["threshold"];
	imap_host = __ihost__;
	domainlis = __wl_domain__;
	indx = __dns_index__;
	if(domainlis[0]=="#"){
		return ["#"];
	}
	#pprint(__long_range__);
	sql = "
		SELECT   SUM(flow) AS flows
		FROM     $(indx)
		WHERE        last(%(__long_range__))
				 AND dip = $(imap_host)
				 AND domain IN $(domainlis)
				 AND isresponse = 1
				 AND ip_range(answer,'0.0.0.0 TO 255.255.255.255')
		GROUP BY answer
		LIMIT 200
	";

	res = query(sql);
	# res 是 domain whitelist 转成dip whitelist
	anslis=item_values(res,"answer");
	return anslis; 
}




# -----------------------------------------------------------------------------
# merge_wl_port() - Query per dport and check dip white list .
# 将domain whitelist得到的dip与wl_port合并
#
# @listRes: A list of previous result.
# @args:    Configuration of per dip.
# -----------------------------------------------------------------------------
def merge_wl_port(lis, args){
	if(lis[0]=="#" || len(lis)==0){
		return __wl_port__;
	}
	flg_80=0;
	flg_443=0;
	#从domain转换得到了IP list
	dportdic = __wl_port__;
	if(dportdic[0]=="#"){
		# 构造80/443
		dportdic =[
			{"port":443,"dip":lis,"range":[]},
			{"port":80,"dip":lis,"range":[]}
		];
	}else{
		dportlist=item_values(dportdic,"port");
		# 原wl_port没有80或443则添加由domain转换而得的IP
		if(NOT(80 IN dportlist)){
			# 构造80/443
			tmp={};
			tmp["port"]=80;
			tmp["dip"]=lis;
			tmp["range"]=[];
			dportdic=append(dportdic,tmp);
			flg_80=1;
		}
		if(NOT(443 IN dportlist)){
			# 构造80/443
			tmp={};
			tmp["port"]=443;
			tmp["dip"]=lis;
			tmp["range"]=[];
			dportdic=append(dportdic,tmp);
			flg_443=1;
		}
	}
	# 原wl_port存在80或443，则合并
	if(flg_80==1 && flg_443==1){
		return dportdic;
	}else{
		for p in dportdic{
			tmpret={};
			idport=p["port"];
			dlis=p["dip"];
			drange=p["range"];
			if(dlis[0]=="#"){
				dlis=[];
			}
			if(idport==80 && flg_80==0){
				#merge
				for ii in lis{
					if(ii!="#"){
						dlis=append(dlis,ii);
					}
				}
			}else if(idport==443 && flg_443==0){
				#merge
				for ii in lis{
					if(ii!="#"){
						dlis=append(dlis,ii);
					}
				}
			}
		}
		return dportdic;
	}
}





# -----------------------------------------------------------------------------
# query_dport_dip() - Query per dport and check dip white list .
# 将domain whitelist得到的dip与wl_port合并
#
# @listRes: A list of previous result.
# @args:    Configuration of per dip.
# -----------------------------------------------------------------------------
def query_dport_dip(lis, args) {
	imap_host = __ihost__;
	#pprint imap_host;
	dportdic = lis;
	indx = __tcp_index__;
	retdic=[];
	# get dip white list
	for p in dportdic{
		tmpret={};
		idport=p["port"];
		dlis=p["dip"];
		drange=p["range"];
		if(dlis[0]=="#"){
			dlis=[];
		}
		if(drange[0]=="#"){
			drange=[];
		}
		
		# search dips which are not in dip whitelist by dport
		sql = "
			SELECT   SUM(flow) AS flows
			FROM     $(indx)
			WHERE        last(%(__range__))
					 AND sip = $(imap_host)
					 AND dport = $(idport)
					 AND NOT(dip IN $(dlis) OR ip_ranges(dip,$(drange)))
			GROUP BY dip
			LIMIT    500
		";
		res = query(sql);
		tmpdiplis=item_values(res,"dip");
		# 汇总
		tmpret["port"]=idport;
		tmpret["diplist"]=tmpdiplis;
		retdic=append(retdic,tmpret);

		# alert
		results=[];
		for dp in tmpdiplis{
			tmp={};
			nows=time("T");
			tmp["@timestamp"]=nows;
			tmp["dip"]=dp;
			tmp["dport"]=idport;
			results=append(results,tmp);	
		}
		#pprint(out_dip);
		# alert
		__alert(results, args);
	}

	return retdic;
}



# -----------------------------------------------------------------------------
# query_sip_dip() - Query per sip/dip and get timeout_state_num.if (sip,dip)
#					has 3_times_handshake then alert.
# 查看sip/dip是否存在三次握手
#
# @listRes: A list of previous dip(out of white list ).
# @args:    Configuration of per dip.
# -----------------------------------------------------------------------------
def query_sip_dip(listRes, args) {
	imap_host = __ihost__;
	indx = __tcp_index__;
	#pprint imap_host;
	if (len(listRes) == 0 or listRes[0]=="#"){
		return listRes;
	}
	for ls in listRes{
		iport=ls["port"];
		dips=ls["diplist"];
		sql = "
			SELECT   dip
			FROM     $(indx)
			WHERE        last(%(__range__))
					 AND sip = $(imap_host)
					 AND dip IN $(dips)
					 AND dport = $(iport)
					 AND timeout_state_num IN $(__valid_status__)
		";
		res = query(sql);
		# alert
		if(len(res)==0){
			continue;
		}else{
			fres=[];
			now=time("T");
			for itms in res{
				tmps={};
				tmps["dip"]=itms;
				tmps["sip"]=imap_host;
				tmps["dport"]=iport;
				tmps["@timestamp"]=now;
				fres=append(fres,tmps);
			}
			__alert(fres, args);
			#pprint("second:");
			#pprint(res);
			#return fres;
		}
	}
}


# -----------------------------------------------------------------------------
# main() - Main entry of the rule.
# -----------------------------------------------------------------------------
def main() {
	func_list = [
		# check dport whitelist 
		{ "name": "query_dport",           "args": __cfg_dport__ },
		{ "name": "query_dport_dip_warn",       "args": __cfg_sip_dip__ },
		# check dport with their whitelist
		{ "name": "query_domain_last",           "args": __cfg_domain__ },
		{ "name": "merge_wl_port",           	"args": __cfg_domain__ },
		{ "name": "query_dport_dip",           "args": __cfg_domain__ },
		{ "name": "query_sip_dip", 			"args": __cfg_sip_dip__ }
	];

	call_list(func_list);
}


# -----------------------------------------------------------------------------
# Run the rule.
# -----------------------------------------------------------------------------
main();

